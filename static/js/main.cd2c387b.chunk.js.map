{"version":3,"sources":["components/CountriesForm/styled.js","components/CountriesForm/index.js","views/Home/styled.js","components/CurrencyPaper/styled.js","utils/api.js","components/CurrencyPaper/index.js","components/ExchangeForm/styled.js","components/ExchangeForm/index.js","views/Home/index.js","components/App/index.js","serviceWorker.js","index.js"],"names":["CountriesFormWrapper","styled","Paper","StyledTypography","Typography","StyledSelect","Select","StyledTableContainer","TableContainer","CountriesForm","onSearchChange","selectedCountry","search","countries","variant","gutterBottom","onChange","value","map","country","MenuItem","key","name","component","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","scope","capital","population","toString","replace","currencies","code","HomeWrapper","div","StyledPaper","Footer","footer","Header","header","api","getCountries","a","fetch","baseCountriesURL","data","json","getDataFromCountry","countryData","getCurrencyFromCountry","money","CurrencyPaper","useState","setMoney","localCurrency","setLocalCurrency","useEffect","console","log","then","localMoney","Object","values","Number","elevation","src","alt","TextField","id","e","target","alpha2Code","ExchangeFormWrapper","ExchangeForm","Home","setSelectedCountry","setSearch","setCountries","find","alpha3Code","dataCountry","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"8yBAMO,IAAMA,EAAuBC,YAAOC,IAAPD,CAAH,KASpBE,EAAmBF,YAAOG,IAAPH,CAAH,KAGhBI,EAAeJ,YAAOK,IAAPL,CAAH,KAGZM,EAAuBN,YAAOO,IAAPP,CAAH,K,sDCgClBQ,EA3CO,SAAC,GAA0D,IAAzDC,EAAwD,EAAxDA,eAAgBC,EAAwC,EAAxCA,gBAAiBC,EAAuB,EAAvBA,OAAQC,EAAe,EAAfA,UAG7D,OACI,kBAACb,EAAD,KACI,kBAACG,EAAD,CAAmBW,QAAQ,KAAKC,cAAY,GAA5C,oBACA,kBAACV,EAAD,CAAcW,SAAUN,EAAgBO,MAAOL,GAE3CC,EACIA,EAAUK,KAAI,SAAAC,GAAO,OACjB,kBAACC,EAAA,EAAD,CAAWC,IAAKF,EAAQG,KAAML,MAAOE,EAAQG,MAAOH,EAAQG,SAEhE,kBAACF,EAAA,EAAD,oBAGPT,GACG,kBAACJ,EAAD,CAAsBgB,UAAWrB,KACjC,kBAACsB,EAAA,EAAD,CAAOC,aAAW,gBAChB,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,0BACA,kBAACA,EAAA,EAAD,CAAWC,MAAM,SAAjB,WACA,kBAACD,EAAA,EAAD,CAAWC,MAAM,SAAjB,cACA,kBAACD,EAAA,EAAD,CAAWC,MAAM,SAAjB,cAGJ,kBAACC,EAAA,EAAD,KACI,kBAACH,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAWL,UAAU,KAAKQ,MAAM,OAC7BpB,EAAgBW,MAEnB,kBAACM,EAAA,EAAD,CAAWC,MAAM,SAASlB,EAAgBqB,SAC1C,kBAACJ,EAAA,EAAD,CAAWC,MAAM,SAASlB,EAAgBsB,WAAWC,WAAWC,QAAQ,2BAA4B,QACpG,kBAACP,EAAA,EAAD,CAAWC,MAAM,SAASlB,EAAgByB,WAAW,GAAGC,Y,wOC1CzE,IAAMC,EAAcrC,IAAOsC,IAAV,K,gqBCEjB,IAAMC,EAAcvC,YAAOC,IAAPD,CAAH,KAOXwC,EAASxC,IAAOyC,OAAV,KASNC,EAAS1C,IAAO2C,OAAV,K,yBCEJC,EAlBC,CACdC,aAAa,WAAD,4BAAE,8BAAAC,EAAA,sEACOC,MAAMC,wCADb,cACNC,EADM,gBAEYA,EAAKC,OAFjB,cAENtC,EAFM,yBAGLA,GAHK,2CAAF,kDAAC,GAKbuC,mBAAmB,WAAD,4BAAE,WAAOf,GAAP,iBAAAU,EAAA,sEACCC,MAVE,oCAUoB,gBAAYX,IADnC,cACZa,EADY,gBAEQA,EAAKC,OAFb,cAEZE,EAFY,yBAGXA,GAHW,2CAAF,mDAAC,GAKnBC,uBAAuB,WAAD,4BAAE,WAAOjB,GAAP,iBAAAU,EAAA,sEACHC,MAAM,GAAD,OAdJ,mCAcI,0BAAqCX,EAArC,iCAbT,yBAYO,cAChBa,EADgB,gBAEFA,EAAKC,OAFH,cAEhBI,EAFgB,yBAGfA,GAHe,2CAAF,mDAAC,ICmCVC,EA3CO,SAAC,GAAuB,IAAtB7C,EAAqB,EAArBA,gBAAqB,EACf8C,mBAAS,IADM,mBAClCF,EADkC,KAC3BG,EAD2B,OAECD,mBAAS,IAFV,mBAElCE,EAFkC,KAEnBC,EAFmB,KAezC,OAPAC,qBAAU,WACNC,QAAQC,IAAIpD,GAAmBA,GAC/BA,GAAmBkC,EAAIS,uBAAuB3C,EAAgByB,WAAW,GAAGC,MAAM2B,MAAK,SAAAC,GACnFL,EAAiBM,OAAOC,OAAOF,GAAY,GAAKG,OAAOb,SAE5D,CAACA,EAAO5C,IAGX,oCACI,kBAAC6B,EAAD,CAAa6B,UAAW,GAChB,kBAAC1B,EAAD,KACI,yBAAK2B,IAAI,6CAA6CC,IAAI,aAC1D,kBAACnE,EAAA,EAAD,CAAYU,QAAQ,KAAKC,cAAY,GAArC,QAIJ,kBAAC0B,EAAD,KACI,kBAAC+B,EAAA,EAAD,CAAWC,GAAG,iBAAiBxD,MAAOsC,EAAOvC,SArBvC,SAAC0D,GACnBhB,EAASgB,EAAEC,OAAO1D,YAwBlB,kBAACuB,EAAD,CAAa6B,UAAW,GACpB,kBAAC1B,EAAD,KACI,yBAAK2B,IAAG,sCAAiC3D,EAAkBA,EAAgBiE,WAAa,KAAhF,gBAAqGL,IAAI,eAC7G,kBAACnE,EAAA,EAAD,CAAYU,QAAQ,KAAKC,cAAY,GAChCJ,EAAkBA,EAAgByB,WAAW,GAAGC,KAAO,QAGhE,kBAACI,EAAD,KACI,kBAAC+B,EAAA,EAAD,CAAWC,GAAG,iBAAiBxD,MAAO0C,Q,2LC1CnD,IAAMkB,EAAsB5E,IAAOsC,IAAV,KCSjBuC,EANM,SAAC,GAAD,IAAEnE,EAAF,EAAEA,gBAAF,OACjB,kBAACkE,EAAD,KACI,kBAAC,EAAD,CAAelE,gBAAiBA,MCyBzBoE,EA1BF,WAAO,IAAD,EAC+BtB,mBAAS,MADxC,mBACR9C,EADQ,KACSqE,EADT,OAEavB,mBAAS,IAFtB,mBAER7C,EAFQ,KAEAqE,EAFA,OAGmBxB,mBAAS,IAH5B,mBAGR5C,EAHQ,KAGGqE,EAHH,KAkBf,OALArB,qBAAU,WACNhB,EAAIC,eAAekB,MAAK,SAAAnD,GACpBqE,EAAarE,QAElB,IAEC,kBAACyB,EAAD,KACI,kBAAC,EAAD,CAAe5B,eAhBI,SAACgE,GACxBO,EAAUP,EAAEC,OAAO1D,OACnB,IAAMN,EAAkBE,EAAUsE,MAAK,SAAAhE,GAAO,OAAIA,EAAQG,OAASoD,EAAEC,OAAO1D,SAC5E4B,EAAIO,mBAAmBzC,EAAgByE,YAAYpB,MAAK,SAAAqB,GAEpDL,EAAmBK,OAWgC1E,gBAAiBA,EAAiBC,OAAQA,EAAQC,UAAWA,IAChH,kBAAC,EAAD,CAAcF,gBAAiBA,MCf5B2E,MARf,WACE,OACE,6BACE,kBAAC,EAAD,QCMcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnC,MAAK,SAAAoC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzC,QAAQyC,MAAMA,EAAMC,c","file":"static/js/main.cd2c387b.chunk.js","sourcesContent":["import styled from 'styled-components';\r\nimport Paper from '@material-ui/core/Paper'\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Select from '@material-ui/core/Select';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\n\r\nexport const CountriesFormWrapper = styled(Paper)`\r\n    width: 70%;\r\n    height: 50%;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    justify-content: center;\r\n    align-items: center;\r\n    text-align: center;\r\n`;\r\nexport const StyledTypography = styled(Typography)`\r\n    flex: 1 0 100%;\r\n`;\r\nexport const StyledSelect = styled(Select)`\r\n    flex-basis: 250px;\r\n`;\r\nexport const StyledTableContainer = styled(TableContainer)`\r\n    width: 90% !important;\r\n`;","import React from 'react'\r\nimport {CountriesFormWrapper, StyledTypography, StyledSelect, StyledTableContainer} from './styled';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\n\r\nconst CountriesForm = ({onSearchChange, selectedCountry, search, countries}) => {\r\n    \r\n    \r\n    return (\r\n        <CountriesFormWrapper>\r\n            <StyledTypography  variant=\"h4\" gutterBottom >Choose a country</StyledTypography>\r\n            <StyledSelect onChange={onSearchChange} value={search}>\r\n                {\r\n                countries ? \r\n                    countries.map(country => \r\n                        <MenuItem  key={country.name} value={country.name}>{country.name}</MenuItem >\r\n                    ) : \r\n                    <MenuItem >No options</MenuItem>\r\n                }\r\n            </StyledSelect>\r\n            {selectedCountry &&\r\n                <StyledTableContainer component={Paper}>\r\n                <Table aria-label=\"simple table\">\r\n                  <TableHead>\r\n                    <TableRow>\r\n                      <TableCell>Full Country Name</TableCell>\r\n                      <TableCell align=\"right\">Capital</TableCell>\r\n                      <TableCell align=\"right\">Population</TableCell>\r\n                      <TableCell align=\"right\">Currency</TableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                      <TableRow>\r\n                        <TableCell component=\"th\" scope=\"row\">\r\n                          {selectedCountry.name}\r\n                        </TableCell>\r\n                        <TableCell align=\"right\">{selectedCountry.capital}</TableCell>\r\n                        <TableCell align=\"right\">{selectedCountry.population.toString().replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, \"$1.\")}</TableCell>\r\n                        <TableCell align=\"right\">{selectedCountry.currencies[0].code}</TableCell>\r\n                      </TableRow>\r\n                  </TableBody>\r\n                </Table>\r\n              </StyledTableContainer>\r\n            }\r\n        </CountriesFormWrapper>\r\n    )\r\n};\r\n\r\nexport default CountriesForm;","import styled from 'styled-components';\r\nexport const HomeWrapper = styled.div`\r\n    width:100%;\r\n    height: 100vh;\r\n    background: #efefef;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex-wrap: wrap;\r\n`;","import styled from 'styled-components';\r\nimport Paper from '@material-ui/core/Paper'\r\n\r\nexport const StyledPaper = styled(Paper)`\r\n    width: 250px;\r\n    margin: 1rem;\r\n    padding: 1rem;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n`\r\nexport const Footer = styled.footer`\r\n    flex: 1 0 100%;\r\n    display: flex;\r\n    * > input {\r\n        font-weight: 300;\r\n        font-size: 36px;\r\n        margin-left: 1rem;\r\n    }\r\n`;\r\nexport const Header = styled.header`\r\n    flex: 1 0 100%;\r\n    display: flex;\r\n    height: 64px;\r\n    margin-right: 1rem;\r\n    > img {\r\n        border-radius: 26px;\r\n    }\r\n    > h5 {\r\n        margin: 1rem;\r\n        font-weight: 500;\r\n    }\r\n`;","const baseCountriesURL = \"https://restcountries.eu/rest/v2/\";\r\nconst baseCurrencyURL = \"https://free.currconv.com/api/v7\"\r\nconst access_key = '572ca773558508356656';\r\n    const api = {\r\n  getCountries: async () => {\r\n    const data = await fetch(baseCountriesURL + \"all\");\r\n    const countries = await data.json();\r\n    return countries;\r\n  },\r\n  getDataFromCountry: async (code) => {\r\n    const data = await fetch(baseCountriesURL + `alpha/${code}`);\r\n    const countryData = await data.json();\r\n    return countryData;  \r\n  },\r\n  getCurrencyFromCountry: async (code) => {\r\n    const data = await fetch(`${baseCurrencyURL}/convert?q=SEK_${code}&compact=ultra&apiKey=${access_key}`)\r\n    const money = await data.json();\r\n    return money;\r\n  }\r\n};\r\n\r\nexport default api;\r\n","import React, {useEffect, useState} from 'react'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { StyledPaper, Footer, Header} from './styled';\r\nimport api from '../../utils/api';\r\n\r\nconst CurrencyPaper = ({selectedCountry}) => {\r\n    const [money, setMoney] = useState(\"\");\r\n    const [localCurrency, setLocalCurrency] = useState(\"\");\r\n\r\n    const onMoneyChange = (e) => {\r\n        setMoney(e.target.value);\r\n    }\r\n\r\n    useEffect(() => {\r\n        console.log(selectedCountry && selectedCountry);\r\n        selectedCountry && api.getCurrencyFromCountry(selectedCountry.currencies[0].code).then(localMoney => {\r\n            setLocalCurrency(Object.values(localMoney)[0] * Number(money));\r\n        });\r\n    }, [money, selectedCountry]);\r\n    \r\n    return(\r\n    <>\r\n        <StyledPaper elevation={3}>\r\n                <Header>\r\n                    <img src=\"https://www.countryflags.io/se/flat/64.png\" alt=\"SEK Flag\" />\r\n                    <Typography variant=\"h5\" gutterBottom>\r\n                        SEK\r\n                    </Typography>\r\n                </Header>\r\n                <Footer>\r\n                    <TextField id=\"standard-basic\" value={money} onChange={onMoneyChange}/>\r\n                </Footer>\r\n        </StyledPaper>\r\n\r\n        <StyledPaper elevation={3}>\r\n            <Header>\r\n                <img src={`https://www.countryflags.io/${selectedCountry ? selectedCountry.alpha2Code : \"AR\"}/flat/64.png`}  alt=\"Local Flag\"/>\r\n                    <Typography variant=\"h5\" gutterBottom>\r\n                        {selectedCountry ? selectedCountry.currencies[0].code : \"ARS\"}\r\n                    </Typography>\r\n                </Header>\r\n                <Footer>\r\n                    <TextField id=\"standard-basic\" value={localCurrency}/>\r\n                </Footer>\r\n        </StyledPaper>\r\n    </>\r\n)};\r\n\r\nexport default CurrencyPaper;","import styled from 'styled-components';\r\nexport const ExchangeFormWrapper = styled.div`\r\n    width: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex-wrap: wrap;\r\n`;","import React from 'react'\r\nimport CurrencyPaper from '../CurrencyPaper';\r\nimport { ExchangeFormWrapper } from './styled';\r\n\r\nconst ExchangeForm = ({selectedCountry}) => (\r\n    <ExchangeFormWrapper>\r\n        <CurrencyPaper selectedCountry={selectedCountry}/>\r\n    </ExchangeFormWrapper>\r\n);\r\n\r\nexport default ExchangeForm;","import React, {useState, useEffect} from 'react'\r\nimport CountriesForm from '../../components/CountriesForm'\r\nimport {HomeWrapper} from './styled';\r\nimport ExchangeForm from '../../components/ExchangeForm';\r\nimport api from '../../utils/api';\r\nconst Home = () => {\r\n    const [selectedCountry, setSelectedCountry] = useState(null);\r\n    const [search, setSearch] = useState(\"\");\r\n    const [countries, setCountries] = useState([]);    \r\n    const handleSearchChange = (e) => {\r\n        setSearch(e.target.value);\r\n        const selectedCountry = countries.find(country => country.name === e.target.value);\r\n        api.getDataFromCountry(selectedCountry.alpha3Code).then(dataCountry => {\r\n\r\n            setSelectedCountry(dataCountry);\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        api.getCountries().then(countries => {\r\n            setCountries(countries);\r\n        })\r\n    }, [])\r\n    return (\r\n        <HomeWrapper>\r\n            <CountriesForm onSearchChange={handleSearchChange} selectedCountry={selectedCountry} search={search} countries={countries}></CountriesForm>\r\n            <ExchangeForm selectedCountry={selectedCountry}></ExchangeForm>\r\n        </HomeWrapper>\r\n    )\r\n};\r\n\r\nexport default Home;","import React from 'react';\nimport Home from '../../views/Home';\n\nfunction App() {\n  return (\n    <div>\n      <Home></Home>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}